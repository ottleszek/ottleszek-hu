@page "/"
@attribute [StreamRendering]
@inject IMediator _mediator

<PageTitle>Publikus programok</PageTitle>


@if (!_isLoaded)
{   
    <MudText>Publikus programok betöltése.</MudText>          
}
else
{
    if (_organizationCategories is not null)
    {       
        <MudChipSet T="string"
                    SelectedValuesChanged="@FilteringByOrganizationCategory"
                    SelectionMode="SelectionMode.MultiSelection"
                    CheckMark="true" Variant="Variant.Text"
                    Color="Color.Info">
            @foreach (OrganizationCategoryDto organizationCategory in _organizationCategories)
            {
                @if (!string.IsNullOrEmpty(organizationCategory.Name))
                {
                    <MudChip T="string" Value="@organizationCategory.Name"></MudChip>
                }
            }
        </MudChipSet>        
    }
    @if (_numberOfPublicPrograms==0)
    {
        <MudText>Nincs elérhető publikus program!</MudText>
    }
    else
    {      
        <MudText Typo="Typo.h4 ">Publikus programok</MudText>
        <MudDataGrid Items="@_publicPrograms" QuickFilter="@Filtring">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Publikus programok</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="@_filtringString" Placeholder="Szűrés" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
            </ToolBarContent>
            <Columns>
                <HierarchyColumn T="@PublicOrganizationProgramDto"/>
                <PropertyColumn Property="pp => pp.Title" Title="Program címe"  />
                <PropertyColumn Property="pp => pp.Start " Format="yyyy.MM.dd HH:mm" Title="Kezdete" />
                <PropertyColumn Property="pp => pp.End" Format="yyyy.MM.dd HH:mm" Title="Vége" />
                <PropertyColumn Property="pp => pp.Organization" Title="Szervező" />
            </Columns>
            <ChildRowContent>
                <MudCardContent>
                    <MudText Style="font-size:12px">Program leírása: @context.Item.Description</MudText>
                    <MudText Style="font-size:12px">Cím:</MudText>
                    
            </MudCardContent>
            </ChildRowContent>
        </MudDataGrid>
        <MudText Class="mt-4">Publikus programok száma: @_numberOfPublicPrograms</MudText>        
    }
}

@code {
    //<MudText Class="ml-2"  Style="font-size:12px"><MultilineComponent Text="@context.Item.GetHungarianAddress()"></MultilineComponent></MudText>

    private List<PublicOrganizationProgramDto>? _publicPrograms;    
    private List<OrganizationCategoryDto>? _organizationCategories;

    private List<PublicOrganizationProgramDto> _allPublicPrograms = new List<PublicOrganizationProgramDto>();

    private bool _isLoaded => _publicPrograms is not null;
    private int _numberOfPublicPrograms => _publicPrograms is not null ? _publicPrograms.Count : 0;
    private string _filtringString=string.Empty;

    protected async override Task OnInitializedAsync()
    {
        
        _organizationCategories = await _mediator.Send(new GetOrganizationsCategoriesListQuery());
        _publicPrograms = await _mediator.Send(new GetPublicOrgranizationProgramListQuery());
        /*
        if (_organizationProgramDataService is not null)
        {
            _publicPrograms = await _organizationProgramDataService.GetAllPublicOrganizationProgramsAsync();
            _allPublicPrograms.AddRange(_publicPrograms);
        }
        if (_organizationCategoryDataService is not null)           
            _organizationCategories = await _organizationCategoryDataService.SelectAsync();
        */
        await base.OnInitializedAsync();
    }

    private Func<PublicOrganizationProgramDto, bool> Filtring => element =>
    {
        if (string.IsNullOrWhiteSpace(_filtringString))
            return true;
        if (element.Title.Contains(_filtringString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;        
    };

    private void FilteringByOrganizationCategory(IReadOnlyCollection<string>? selected)
    {
        if (_publicPrograms is not null && _allPublicPrograms.Any())
        {
            _publicPrograms.Clear();
            if ((selected is null || !selected.Any()))
                _publicPrograms.AddRange(_allPublicPrograms);
            else
            {
                foreach (string organizationCategoryName in selected)
                {
                    List<PublicOrganizationProgramDto> newPublicOrganizationPrograms = _allPublicPrograms.Where(publicProgram => publicProgram.OrganizationCategory == organizationCategoryName).ToList();
                    _publicPrograms.AddRange(newPublicOrganizationPrograms);
                }
            }
        }
    }
}