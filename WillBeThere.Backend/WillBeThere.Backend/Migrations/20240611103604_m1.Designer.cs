// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WillBeThere.Backend.Context;

#nullable disable

namespace WillBeThere.Backend.Migrations
{
    [DbContext(typeof(WillBeThereMysqlContext))]
    [Migration("20240611103604_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Door")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PublicScapeID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("PublicSpaceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PublicScapeID");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0f835de-2e5d-44a1-a619-c52f07865ce8"),
                            Door = -1,
                            Floor = -1,
                            House = 1,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeID = new Guid("54ea22f4-d013-4cb4-8709-6aeeb022c975"),
                            PublicSpaceName = "Napraforgó utca"
                        },
                        new
                        {
                            Id = new Guid("ee9ff0d5-6cf8-4a6f-9a2e-3c85b621bbf8"),
                            Door = -1,
                            Floor = -1,
                            House = 49,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeID = new Guid("54ea22f4-d013-4cb4-8709-6aeeb022c975"),
                            PublicSpaceName = "Koszorú utca"
                        },
                        new
                        {
                            Id = new Guid("42f26620-e28f-48f0-bd51-4dbf5f906c06"),
                            Door = -1,
                            Floor = -1,
                            House = 33,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeID = new Guid("54ea22f4-d013-4cb4-8709-6aeeb022c975"),
                            PublicSpaceName = "Koszorú utca"
                        },
                        new
                        {
                            Id = new Guid("25602120-2ffd-45e5-ac57-dbaa87b6967a"),
                            Door = -1,
                            Floor = -1,
                            House = 50,
                            Locality = "Szeged",
                            PostalCode = 6710,
                            PublicScapeID = new Guid("8e757ad5-f7ca-4806-9be2-d6ba3f0aa4a1"),
                            PublicSpaceName = "Kapisztrán"
                        },
                        new
                        {
                            Id = new Guid("e8d0aaa3-54df-4088-b680-4d4d23b97066"),
                            Door = -1,
                            Floor = -1,
                            House = 12,
                            Locality = "Szeged",
                            PostalCode = 6720,
                            PublicScapeID = new Guid("1cd972c8-4f03-46af-879c-b353faa8669a"),
                            PublicSpaceName = "Dugonics"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OrganizationCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationCategoryId");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = new Guid("adc0a58a-5b80-45fe-a736-18fec5e4d96a"),
                            Description = "Gyálaréti Gyuris család programnaptára",
                            Name = "Gyálaréti Gyuris család",
                            Url = "gyuris.gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("3ae02173-56cd-4029-a8c1-3b465e59098f"),
                            Description = "Kikindáról elszármazott Gyuris Család",
                            Name = "Kikindai Gyuris család",
                            Url = "gyuris.kikinda.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("5b05c3dc-769e-403b-9f81-5d0109c6c642"),
                            Description = "Gyálaréten működő férfi sátor közösség",
                            Name = "Gyálaréti férfi sátor",
                            OrganizationCategoryId = new Guid("3cd6fca2-5a0c-4950-88bc-496ff7f94eaa"),
                            Url = "ferfisator.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("ad839041-43cd-454e-acb7-c895d757b8b1"),
                            Description = "Magyarorszagi férfi sátor közösség",
                            Name = "Férfi sátor",
                            OrganizationCategoryId = new Guid("3cd6fca2-5a0c-4950-88bc-496ff7f94eaa"),
                            Url = "ferfisator.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("1344c061-2e5c-4ddc-893b-056f17183c14"),
                            Description = "Gyálaréten működő meditációs csoprot amely a Jézus imát gyakorolja",
                            Name = "Gyálaréti meditációs imacsoport",
                            OrganizationCategoryId = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Url = "meditacio.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("c39517de-6ffe-4fc2-9072-93bcd77d2a36"),
                            Description = "Gyálaréti filához tartozó csaladcsoport",
                            Name = "Gyálaréti családcsoport",
                            OrganizationCategoryId = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Url = "csaladcsoport.flila.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("d1a192af-77dd-4634-b938-8ee5ebd7eddd"),
                            Description = "Gyálaréti művelődési ház",
                            Name = "Gyálaréti művelődési ház",
                            OrganizationCategoryId = new Guid("72c62fda-9ace-4ee7-95ad-28225327f3c6"),
                            Url = "szeged-gyalaret.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("772abf07-d0dd-4628-b177-55b54c322003"),
                            Description = "Szentmihályi művelődési ház",
                            Name = "Szentmihályi művelődési ház",
                            OrganizationCategoryId = new Guid("72c62fda-9ace-4ee7-95ad-28225327f3c6"),
                            Url = "muvelodesihaz.szeged-szentmihaly.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("8d96f87f-4067-4370-a2f4-74062754e328"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynöksége",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség",
                            OrganizationCategoryId = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Url = "pasztoralis-helynokseg.szeged-csanádi-egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("c8e7e94d-eae1-4ce9-96d2-0dde187ebfe5"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynökség - Családpasztoráció, ",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség - Családpasztoráció",
                            OrganizationCategoryId = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Url = "pasztoralis-helynokseg.szeged-csanádi-egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("4e99d6f3-5720-4821-832a-aa7c4ce582e6"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynökség - Korházi lelkészség",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség - Korházi lelkészség",
                            OrganizationCategoryId = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Url = "korhazi-lelekszseg.pasztoralis-helynokseg.szeged-csanádi - egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("3ba794ad-ef38-465a-b983-3af4e5982f06"),
                            Description = "Munkásmisszió, vezetői kör",
                            Name = "Munkáasmisszió",
                            OrganizationCategoryId = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Url = "vezetok.munkasmisszio.ottleszek.hu",
                            Website = ""
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationAdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationAdminUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec0cf70c-79ae-4861-b93f-3d5225797795"),
                            AdminId = new Guid("93b1acbd-6333-4f90-8fa2-a6d58969708c"),
                            OrganizationId = new Guid("4e99d6f3-5720-4821-832a-aa7c4ce582e6")
                        },
                        new
                        {
                            Id = new Guid("4185938b-5c5a-4c5f-acdf-5392ce5f53b3"),
                            AdminId = new Guid("e0afccfe-364c-436e-9306-88187e8344bd"),
                            OrganizationId = new Guid("1344c061-2e5c-4ddc-893b-056f17183c14")
                        },
                        new
                        {
                            Id = new Guid("0ce02714-a5b8-46af-89ef-a8bc770adfa5"),
                            AdminId = new Guid("fc10650f-efbf-42a0-91bc-ee326f4c9453"),
                            OrganizationId = new Guid("ad839041-43cd-454e-acb7-c895d757b8b1")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OrganizationCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0e51975-494e-4467-b00a-66a3c56c9972"),
                            Name = "vallás"
                        },
                        new
                        {
                            Id = new Guid("08af18b0-1d3c-411e-a692-d81c8d40cb75"),
                            Name = "nevelés"
                        },
                        new
                        {
                            Id = new Guid("dc5fcd4e-8e87-47e0-a944-c94a1c84b2d2"),
                            Name = "házasság"
                        },
                        new
                        {
                            Id = new Guid("3cd6fca2-5a0c-4950-88bc-496ff7f94eaa"),
                            Name = "férfi identitás"
                        },
                        new
                        {
                            Id = new Guid("3274bb0c-beff-4511-9fba-6e440236c493"),
                            Name = "ifjúság"
                        },
                        new
                        {
                            Id = new Guid("72c62fda-9ace-4ee7-95ad-28225327f3c6"),
                            Name = "művelődés"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeffered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OrganizationOwnerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProgramOwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizationOwnerId");

                    b.HasIndex("ProgramOwnerId");

                    b.ToTable("OrgranizationProgram");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c395bb6b-9424-486d-8004-947a98af713c"),
                            AddressId = new Guid("ee9ff0d5-6cf8-4a6f-9a2e-3c85b621bbf8"),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationOwnerId = new Guid("1344c061-2e5c-4ddc-893b-056f17183c14"),
                            ProgramOwnerId = new Guid("93b1acbd-6333-4f90-8fa2-a6d58969708c"),
                            Start = new DateTime(2024, 5, 16, 20, 30, 0, 0, DateTimeKind.Local),
                            Title = "Meditáció"
                        },
                        new
                        {
                            Id = new Guid("387378db-b9d8-476c-8f2f-c8bb8af10f3c"),
                            AddressId = new Guid("e8d0aaa3-54df-4088-b680-4d4d23b97066"),
                            End = new DateTime(2024, 6, 11, 12, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationOwnerId = new Guid("4e99d6f3-5720-4821-832a-aa7c4ce582e6"),
                            ProgramOwnerId = new Guid("e0afccfe-364c-436e-9306-88187e8344bd"),
                            Start = new DateTime(2024, 6, 10, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Lelkigyakorlat"
                        },
                        new
                        {
                            Id = new Guid("ee0e79db-3cd9-42fe-aad8-5b35b672e97f"),
                            AddressId = new Guid("ee9ff0d5-6cf8-4a6f-9a2e-3c85b621bbf8"),
                            End = new DateTime(2024, 6, 16, 20, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationOwnerId = new Guid("5b05c3dc-769e-403b-9f81-5d0109c6c642"),
                            ProgramOwnerId = new Guid("fc10650f-efbf-42a0-91bc-ee326f4c9453"),
                            Start = new DateTime(2024, 6, 16, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor tréning"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationProgramId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RegisteredUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProgramId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("Participation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2309d8a-17cd-4edd-a7f4-e3affe218fdf"),
                            Evaluation = 9,
                            OrganizationProgramId = new Guid("c395bb6b-9424-486d-8004-947a98af713c"),
                            RegisteredUserId = new Guid("fc10650f-efbf-42a0-91bc-ee326f4c9453")
                        },
                        new
                        {
                            Id = new Guid("d8df8595-2e38-496b-8e99-ae348fcc4416"),
                            Evaluation = 9,
                            OrganizationProgramId = new Guid("c395bb6b-9424-486d-8004-947a98af713c"),
                            RegisteredUserId = new Guid("93b1acbd-6333-4f90-8fa2-a6d58969708c")
                        },
                        new
                        {
                            Id = new Guid("5c6fe2b8-d989-4358-8d81-5100e750a8f3"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("387378db-b9d8-476c-8f2f-c8bb8af10f3c"),
                            RegisteredUserId = new Guid("e0afccfe-364c-436e-9306-88187e8344bd")
                        },
                        new
                        {
                            Id = new Guid("81634e17-cfbb-41f2-8bdd-2957c7fcf101"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("387378db-b9d8-476c-8f2f-c8bb8af10f3c"),
                            RegisteredUserId = new Guid("93b1acbd-6333-4f90-8fa2-a6d58969708c")
                        },
                        new
                        {
                            Id = new Guid("c25b1d5c-f6e4-411d-806e-c6411db9fcf2"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("ee0e79db-3cd9-42fe-aad8-5b35b672e97f"),
                            RegisteredUserId = new Guid("e0afccfe-364c-436e-9306-88187e8344bd")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.PublicSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PublicSpace");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54ea22f4-d013-4cb4-8709-6aeeb022c975"),
                            Name = "utca"
                        },
                        new
                        {
                            Id = new Guid("1cd972c8-4f03-46af-879c-b353faa8669a"),
                            Name = "tér"
                        },
                        new
                        {
                            Id = new Guid("ac4180df-f964-4d83-ae49-2afe31bb8579"),
                            Name = "sugárút"
                        },
                        new
                        {
                            Id = new Guid("8e757ad5-f7ca-4806-9be2-d6ba3f0aa4a1"),
                            Name = "köz"
                        },
                        new
                        {
                            Id = new Guid("b290bb88-c3d3-40e8-934a-22aed8b4b329"),
                            Name = "út"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.RegisteredUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc10650f-efbf-42a0-91bc-ee326f4c9453"),
                            FirstName = "Csaba",
                            LastName = "Gyuris"
                        },
                        new
                        {
                            Id = new Guid("93b1acbd-6333-4f90-8fa2-a6d58969708c"),
                            FirstName = "Balázs",
                            LastName = "Szászi"
                        },
                        new
                        {
                            Id = new Guid("e0afccfe-364c-436e-9306-88187e8344bd"),
                            FirstName = "Katalin",
                            LastName = "Gyurisné Hutter"
                        },
                        new
                        {
                            Id = new Guid("d18f16be-c8d7-4941-bf85-fcf69821fee1"),
                            FirstName = "Jenei",
                            LastName = "Kornél"
                        },
                        new
                        {
                            Id = new Guid("13fce26a-556f-4b02-a6ad-04e86aac26c1"),
                            FirstName = "Anikó",
                            LastName = "Szászi"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.PublicSpace", "PublicSpace")
                        .WithMany("Addresses")
                        .HasForeignKey("PublicScapeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicSpace");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.OrganizationCategory", "OrganizationCategory")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationCategoryId");

                    b.Navigation("OrganizationCategory");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationAdminUser", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.RegisteredUser", "Admin")
                        .WithOne("OrganizationAdminUser")
                        .HasForeignKey("WillBeThere.Shared.Models.OrganizationAdminUser", "AdminId");

                    b.HasOne("WillBeThere.Shared.Models.Organization", "Organization")
                        .WithMany("OrganizationAdminUsers")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Admin");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Address", "Address")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("AddressId");

                    b.HasOne("WillBeThere.Shared.Models.Organization", "Organization")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("OrganizationOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WillBeThere.Shared.Models.OrganizationAdminUser", "UserOwner")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("ProgramOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Organization");

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Participation", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.OrganizationProgram", "OrganizationProgram")
                        .WithMany("ProgramParticipants")
                        .HasForeignKey("OrganizationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WillBeThere.Shared.Models.RegisteredUser", "Participant")
                        .WithMany("RegisteredUserPaticipations")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationProgram");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.Navigation("OrganizationAdminUsers");

                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationAdminUser", b =>
                {
                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationCategory", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.Navigation("ProgramParticipants");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.PublicSpace", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.RegisteredUser", b =>
                {
                    b.Navigation("OrganizationAdminUser");

                    b.Navigation("RegisteredUserPaticipations");
                });
#pragma warning restore 612, 618
        }
    }
}
