// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WillBeThere.Backend.Context;

#nullable disable

namespace WillBeThere.Backend.Migrations
{
    [DbContext(typeof(WillBeThereMysqlContext))]
    [Migration("20240903094013_wt1")]
    partial class wt1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Door")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicScapeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PublicSpaceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PublicScapeId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a0edd05-858f-481e-a7ce-5527e83e2e14"),
                            Door = -1,
                            Floor = -1,
                            House = 1,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeId = new Guid("832bb42d-9da0-411b-a29e-abf0c2f7b8d3"),
                            PublicSpaceName = "Napraforgó utca"
                        },
                        new
                        {
                            Id = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Door = -1,
                            Floor = -1,
                            House = 49,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeId = new Guid("832bb42d-9da0-411b-a29e-abf0c2f7b8d3"),
                            PublicSpaceName = "Koszorú utca"
                        },
                        new
                        {
                            Id = new Guid("ed439cbe-70ed-45a5-8252-276ecf602590"),
                            Door = -1,
                            Floor = -1,
                            House = 33,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeId = new Guid("832bb42d-9da0-411b-a29e-abf0c2f7b8d3"),
                            PublicSpaceName = "Koszorú utca"
                        },
                        new
                        {
                            Id = new Guid("6405e55d-d063-4d30-b0f6-c9ed8b53832e"),
                            Door = -1,
                            Floor = -1,
                            House = 50,
                            Locality = "Szeged",
                            PostalCode = 6710,
                            PublicScapeId = new Guid("af3fe631-6c0f-452d-b185-508abe514b35"),
                            PublicSpaceName = "Kapisztrán"
                        },
                        new
                        {
                            Id = new Guid("ba3c4a7c-9c12-46cd-95d0-2b2840435b8b"),
                            Door = -1,
                            Floor = -1,
                            House = 12,
                            Locality = "Szeged",
                            PostalCode = 6720,
                            PublicScapeId = new Guid("d9824104-2006-480c-bb9e-105b50bb68f4"),
                            PublicSpaceName = "Dugonics"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Editor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d13af0d-a040-484d-833b-e9c15e841073")
                        },
                        new
                        {
                            Id = new Guid("7bb4beb2-1d9e-4e0c-87fb-d7af8db83e00")
                        },
                        new
                        {
                            Id = new Guid("95955821-1b20-4606-8133-7951c0733d25")
                        },
                        new
                        {
                            Id = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0")
                        },
                        new
                        {
                            Id = new Guid("110d7c48-92a1-4e34-aa77-de30f9008d68")
                        },
                        new
                        {
                            Id = new Guid("3f35105b-cc00-4305-a232-1687c6a0f65a")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid?>("OrganizationCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationCategoryId");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d27f57c-04f4-4f39-8d96-97f738eb4d95"),
                            Description = "Gyálaréti Gyuris család programnaptára",
                            Name = "Gyálaréti Gyuris család",
                            Url = "gyuris-gyalaret",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("ded5eff7-a465-4d32-bcbf-a4e2f21ed100"),
                            Description = "Kikindáról elszármazott Gyuris Család",
                            Name = "Kikindai Gyuris család",
                            Url = "gyuris-kikinda",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("b99f6686-1ad4-4187-a212-1c0ead42843a"),
                            Description = "Gyálaréten működő férfi sátor közösség",
                            Name = "Gyálaréti férfi sátor",
                            OrganizationCategoryId = new Guid("6ef25418-d306-4f71-8105-e0e22680dd46"),
                            Url = "ferfisator.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("060aa634-36c5-4acd-a050-c3f7c39e160a"),
                            Description = "Magyarorszagi férfi sátor közösség",
                            Name = "Férfi sátor",
                            OrganizationCategoryId = new Guid("6ef25418-d306-4f71-8105-e0e22680dd46"),
                            Url = "ferfisator.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("f584dccc-2a33-43fc-a5ad-beb03b603777"),
                            Description = "Gyálaréten működő meditációs csoprot amely a Jézus imát gyakorolja",
                            Name = "Gyálaréti meditációs imacsoport",
                            OrganizationCategoryId = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Url = "meditacio.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("4dcc0818-3a9e-46ca-9162-e711dae5bd47"),
                            Description = "Gyálaréti filához tartozó csaladcsoport",
                            Name = "Gyálaréti családcsoport",
                            OrganizationCategoryId = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Url = "csaladcsoport.flila.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("2a862e9f-6165-4da0-839a-aeb1f9e893d3"),
                            Description = "Gyálaréti művelődési ház",
                            Name = "Gyálaréti művelődési ház",
                            OrganizationCategoryId = new Guid("9421f6d4-cb9d-4989-9617-ce51ee897d95"),
                            Url = "szeged-gyalaret.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("28215cb0-d259-48df-a269-116c51bb1281"),
                            Description = "Szentmihályi művelődési ház",
                            Name = "Szentmihályi művelődési ház",
                            OrganizationCategoryId = new Guid("9421f6d4-cb9d-4989-9617-ce51ee897d95"),
                            Url = "muvelodesihaz.szeged-szentmihaly.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("3d2c4d9a-8c3c-40ba-9931-6e6eb7199fc0"),
                            Description = "Szeged-Csanád Egyházmegye Pasztorális helynöksége",
                            Name = "Szeged-Csanád Egyházmegye Pasztorális helynökség",
                            OrganizationCategoryId = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Url = "pasztoralis-helynokseg.szeged-csanádi-egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("06132d73-9950-42a2-97b5-a2c8e749a302"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynökség - Családpasztoráció, ",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség - Családpasztoráció",
                            OrganizationCategoryId = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Url = "pasztoralis-helynokseg.szeged-csanádi-egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("890799e5-0139-427a-976f-b187be5a36b2"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynökség - Korházi lelkészség",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség - Korházi lelkészség",
                            OrganizationCategoryId = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Url = "korhazi-lelekszseg.pasztoralis-helynokseg.szeged-csanádi - egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("11145a50-f446-412d-8b9a-b40223970b38"),
                            Description = "Munkásmisszió, vezetői kör",
                            Name = "Munkáasmisszió",
                            OrganizationCategoryId = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Url = "vezetok.munkasmisszio.ottleszek.hu",
                            Website = ""
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ProgramCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02a57923-f857-4fd6-90fe-2b21fc7be918"),
                            Name = "vallás"
                        },
                        new
                        {
                            Id = new Guid("8fc45db0-5c9a-4bb2-8605-1f03177352f1"),
                            Name = "nevelés"
                        },
                        new
                        {
                            Id = new Guid("f0847104-3402-4ef0-a1d9-692d18005e7c"),
                            Name = "házasság"
                        },
                        new
                        {
                            Id = new Guid("6ef25418-d306-4f71-8105-e0e22680dd46"),
                            Name = "férfi identitás"
                        },
                        new
                        {
                            Id = new Guid("945e70af-6620-4d1a-8840-a235ad1ca23a"),
                            Name = "ifjúság"
                        },
                        new
                        {
                            Id = new Guid("9421f6d4-cb9d-4989-9617-ce51ee897d95"),
                            Name = "művelődés"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationEditor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EditorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationEditor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c751cf7-8d0d-4e85-8227-59e8e29ee091"),
                            EditorId = new Guid("0d13af0d-a040-484d-833b-e9c15e841073"),
                            OrganizationId = new Guid("0d27f57c-04f4-4f39-8d96-97f738eb4d95")
                        },
                        new
                        {
                            Id = new Guid("7efae4af-0709-4305-8ca9-89ff6049d178"),
                            EditorId = new Guid("0d13af0d-a040-484d-833b-e9c15e841073"),
                            OrganizationId = new Guid("ded5eff7-a465-4d32-bcbf-a4e2f21ed100")
                        },
                        new
                        {
                            Id = new Guid("9ee8ecbd-cef5-4f73-88b5-ebbd399e3842"),
                            EditorId = new Guid("0d13af0d-a040-484d-833b-e9c15e841073"),
                            OrganizationId = new Guid("b99f6686-1ad4-4187-a212-1c0ead42843a")
                        },
                        new
                        {
                            Id = new Guid("c2db5a6d-fc3c-413f-8d7d-35264be6325f"),
                            EditorId = new Guid("110d7c48-92a1-4e34-aa77-de30f9008d68"),
                            OrganizationId = new Guid("060aa634-36c5-4acd-a050-c3f7c39e160a")
                        },
                        new
                        {
                            Id = new Guid("9bb98ebb-cc7a-41a9-8d04-ef0696374b68"),
                            EditorId = new Guid("110d7c48-92a1-4e34-aa77-de30f9008d68"),
                            OrganizationId = new Guid("f584dccc-2a33-43fc-a5ad-beb03b603777")
                        },
                        new
                        {
                            Id = new Guid("a8575148-e4f0-4fa2-ae32-d7a3cb12aedc"),
                            EditorId = new Guid("3f35105b-cc00-4305-a232-1687c6a0f65a"),
                            OrganizationId = new Guid("4dcc0818-3a9e-46ca-9162-e711dae5bd47")
                        },
                        new
                        {
                            Id = new Guid("a721c868-33fa-482a-b87c-1e5fdb61d2c3"),
                            EditorId = new Guid("95955821-1b20-4606-8133-7951c0733d25"),
                            OrganizationId = new Guid("3d2c4d9a-8c3c-40ba-9931-6e6eb7199fc0")
                        },
                        new
                        {
                            Id = new Guid("e76786e1-5579-455a-9eed-1c444487cbdf"),
                            EditorId = new Guid("95955821-1b20-4606-8133-7951c0733d25"),
                            OrganizationId = new Guid("06132d73-9950-42a2-97b5-a2c8e749a302")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeffered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProgramOwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrgranizationProgram");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a41e8251-b60b-4af0-8737-2e4aef914441"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Csendes ima.",
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("f584dccc-2a33-43fc-a5ad-beb03b603777"),
                            ProgramOwnerId = new Guid("d7e2a3f6-b67b-4879-9ae6-1371520981a6"),
                            Start = new DateTime(2024, 8, 8, 20, 30, 0, 0, DateTimeKind.Local),
                            Title = "Meditáció"
                        },
                        new
                        {
                            Id = new Guid("347cd965-9a69-4181-aa33-e6e233e21e7e"),
                            AddressId = new Guid("ba3c4a7c-9c12-46cd-95d0-2b2840435b8b"),
                            Description = "Csendes lelkigyakorlat felnőtteknek.",
                            End = new DateTime(2024, 9, 3, 12, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("890799e5-0139-427a-976f-b187be5a36b2"),
                            ProgramOwnerId = new Guid("d0f97edd-3470-45b4-8f1a-b3af7f84e557"),
                            Start = new DateTime(2024, 9, 2, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Lelkigyakorlat"
                        },
                        new
                        {
                            Id = new Guid("530aba93-345b-467d-a316-620e3c4b60a1"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Apasebek tréning.",
                            End = new DateTime(2024, 9, 8, 20, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("b99f6686-1ad4-4187-a212-1c0ead42843a"),
                            ProgramOwnerId = new Guid("40dcf7fb-9fcc-4ded-8e70-0359002b97a6"),
                            Start = new DateTime(2024, 9, 8, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor tréning"
                        },
                        new
                        {
                            Id = new Guid("77d0b830-b787-41e6-8652-f9e7896d37ca"),
                            AddressId = new Guid("ba3c4a7c-9c12-46cd-95d0-2b2840435b8b"),
                            Description = "Lányoknak...",
                            End = new DateTime(2024, 11, 18, 21, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("3d2c4d9a-8c3c-40ba-9931-6e6eb7199fc0"),
                            ProgramOwnerId = new Guid("48259978-19b3-43c0-9815-7590eb2ffac1"),
                            Start = new DateTime(2024, 11, 18, 15, 0, 0, 0, DateTimeKind.Local),
                            Title = "Ciklus show"
                        },
                        new
                        {
                            Id = new Guid("4ef29f5a-8b71-402d-a766-de45ad4b050b"),
                            AddressId = new Guid("ed439cbe-70ed-45a5-8252-276ecf602590"),
                            Description = "Délalföldi",
                            End = new DateTime(2024, 9, 3, 2, 30, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("2a862e9f-6165-4da0-839a-aeb1f9e893d3"),
                            ProgramOwnerId = new Guid("96bfb0ad-b4b4-4c6c-9784-e3720f0e1327"),
                            Start = new DateTime(2024, 9, 2, 21, 0, 0, 0, DateTimeKind.Local),
                            Title = "Táncház"
                        },
                        new
                        {
                            Id = new Guid("798d9e2c-e745-4b9e-b5c7-9cd8906378e8"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Férfiaknak",
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("060aa634-36c5-4acd-a050-c3f7c39e160a"),
                            ProgramOwnerId = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0"),
                            Start = new DateTime(2024, 7, 8, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        },
                        new
                        {
                            Id = new Guid("5153286c-0566-4b0d-8f9b-6c4987b03e7f"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Férfiaknak",
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("060aa634-36c5-4acd-a050-c3f7c39e160a"),
                            ProgramOwnerId = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0"),
                            Start = new DateTime(2024, 8, 4, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        },
                        new
                        {
                            Id = new Guid("d91b1411-6a03-47f7-9dda-a0c76a62ecc4"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Férfiaknak",
                            End = new DateTime(2024, 9, 10, 21, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("060aa634-36c5-4acd-a050-c3f7c39e160a"),
                            ProgramOwnerId = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0"),
                            Start = new DateTime(2024, 9, 10, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        },
                        new
                        {
                            Id = new Guid("a8c2dd82-7452-4470-b216-0fd852d2e7a7"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Családoknak",
                            End = new DateTime(2024, 9, 3, 1, 30, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("4dcc0818-3a9e-46ca-9162-e711dae5bd47"),
                            ProgramOwnerId = new Guid("3f35105b-cc00-4305-a232-1687c6a0f65a"),
                            Start = new DateTime(2024, 9, 2, 21, 0, 0, 0, DateTimeKind.Local),
                            Title = "Családcsoport"
                        },
                        new
                        {
                            Id = new Guid("31491233-163d-4260-8647-61d1a26a56cb"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Apasebek tréning.",
                            End = new DateTime(2024, 9, 23, 20, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = true,
                            IsPublic = true,
                            OrganizationId = new Guid("b99f6686-1ad4-4187-a212-1c0ead42843a"),
                            ProgramOwnerId = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0"),
                            Start = new DateTime(2024, 9, 23, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor tréning"
                        },
                        new
                        {
                            Id = new Guid("8222f273-cb0d-4fc3-800d-1a577d88b30c"),
                            AddressId = new Guid("beb42da6-11f1-4aee-b969-3f6d6fe3d7bc"),
                            Description = "Férfiaknak",
                            End = new DateTime(2024, 9, 13, 21, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = true,
                            IsPublic = false,
                            OrganizationId = new Guid("060aa634-36c5-4acd-a050-c3f7c39e160a"),
                            ProgramOwnerId = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0"),
                            Start = new DateTime(2024, 9, 13, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationProgramId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProgramId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Participation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bba0b0f6-9802-493e-b51c-10515b1d7932"),
                            Evaluation = 9,
                            OrganizationProgramId = new Guid("a41e8251-b60b-4af0-8737-2e4aef914441"),
                            ParticipantId = new Guid("0d13af0d-a040-484d-833b-e9c15e841073")
                        },
                        new
                        {
                            Id = new Guid("ac77b98b-d882-429c-a84e-f888dac62ca5"),
                            Evaluation = 9,
                            OrganizationProgramId = new Guid("a41e8251-b60b-4af0-8737-2e4aef914441"),
                            ParticipantId = new Guid("7bb4beb2-1d9e-4e0c-87fb-d7af8db83e00")
                        },
                        new
                        {
                            Id = new Guid("2ee2943e-787a-4fa8-b908-0d56ba0ee7ca"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("347cd965-9a69-4181-aa33-e6e233e21e7e"),
                            ParticipantId = new Guid("95955821-1b20-4606-8133-7951c0733d25")
                        },
                        new
                        {
                            Id = new Guid("22a991ec-10cc-4647-a5d2-9d9f22e7f250"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("347cd965-9a69-4181-aa33-e6e233e21e7e"),
                            ParticipantId = new Guid("7bb4beb2-1d9e-4e0c-87fb-d7af8db83e00")
                        },
                        new
                        {
                            Id = new Guid("6013c2f4-8129-41b1-b55b-aa3b57c9596f"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("530aba93-345b-467d-a316-620e3c4b60a1"),
                            ParticipantId = new Guid("95955821-1b20-4606-8133-7951c0733d25")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.ProgramOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("ProgramOwner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0")
                        },
                        new
                        {
                            Id = new Guid("3f35105b-cc00-4305-a232-1687c6a0f65a")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.PublicSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PublicSpace");

                    b.HasData(
                        new
                        {
                            Id = new Guid("832bb42d-9da0-411b-a29e-abf0c2f7b8d3"),
                            Name = "utca"
                        },
                        new
                        {
                            Id = new Guid("d9824104-2006-480c-bb9e-105b50bb68f4"),
                            Name = "tér"
                        },
                        new
                        {
                            Id = new Guid("ebe47883-b5ba-449c-9085-6c7f3f95e5c2"),
                            Name = "sugárút"
                        },
                        new
                        {
                            Id = new Guid("af3fe631-6c0f-452d-b185-508abe514b35"),
                            Name = "köz"
                        },
                        new
                        {
                            Id = new Guid("17682174-b7a6-4313-9654-7357762b1f98"),
                            Name = "út"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.RegisteredUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d13af0d-a040-484d-833b-e9c15e841073"),
                            FirstName = "Csaba",
                            LastName = "Gyuris"
                        },
                        new
                        {
                            Id = new Guid("7bb4beb2-1d9e-4e0c-87fb-d7af8db83e00"),
                            FirstName = "Balázs",
                            LastName = "Szászi"
                        },
                        new
                        {
                            Id = new Guid("95955821-1b20-4606-8133-7951c0733d25"),
                            FirstName = "Katalin",
                            LastName = "Gyurisné Hutter"
                        },
                        new
                        {
                            Id = new Guid("ba6bc4da-5da4-46a4-8413-2fca1e786bc0"),
                            FirstName = "Jenei",
                            LastName = "Kornél"
                        },
                        new
                        {
                            Id = new Guid("110d7c48-92a1-4e34-aa77-de30f9008d68"),
                            FirstName = "Anikó",
                            LastName = "Szászi"
                        },
                        new
                        {
                            Id = new Guid("3f35105b-cc00-4305-a232-1687c6a0f65a"),
                            FirstName = "Zsuzsanna",
                            LastName = "Szabóné"
                        },
                        new
                        {
                            Id = new Guid("25b003a6-23bf-41bc-8baa-80e46f416c7d"),
                            FirstName = "Név10",
                            LastName = "Felhasználó"
                        },
                        new
                        {
                            Id = new Guid("c27b5d01-5b9b-4a35-aedc-144fbeb2e15a"),
                            FirstName = "Név10",
                            LastName = "Felhasznál1"
                        },
                        new
                        {
                            Id = new Guid("d0c6960d-48d4-4a70-a277-f69a976c3980"),
                            FirstName = "Név12",
                            LastName = "Felhasználó"
                        },
                        new
                        {
                            Id = new Guid("0f9cc30e-21e8-4316-b3f1-7a361c49754e"),
                            FirstName = "Név13",
                            LastName = "Felhasználó"
                        },
                        new
                        {
                            Id = new Guid("eb6b4fca-d482-4e38-8e4e-d4259a16672d"),
                            FirstName = "Név14",
                            LastName = "Felhasználó"
                        },
                        new
                        {
                            Id = new Guid("5e816088-47dc-46cf-b79b-f8618c826ef5"),
                            FirstName = "Név15",
                            LastName = "Felhasználó"
                        },
                        new
                        {
                            Id = new Guid("e55e39dd-a519-44de-a45e-51f1a4a244f0"),
                            FirstName = "Név16",
                            LastName = "Felhasználó"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.PublicSpace", "PublicSpace")
                        .WithMany("Addresses")
                        .HasForeignKey("PublicScapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicSpace");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Editor", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.RegisteredUser", "RegisteredUser")
                        .WithOne("Editor")
                        .HasForeignKey("WillBeThere.Shared.Models.Editor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.OrganizationCategory", "OrganizationCategory")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationCategoryId");

                    b.Navigation("OrganizationCategory");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationEditor", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Editor", "Editor")
                        .WithMany("Organizations")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WillBeThere.Shared.Models.Organization", "Organization")
                        .WithMany("Editors")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Address", "Address")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WillBeThere.Shared.Models.Organization", "Organization")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Participation", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.OrganizationProgram", "OrganizationProgram")
                        .WithMany("Participants")
                        .HasForeignKey("OrganizationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WillBeThere.Shared.Models.RegisteredUser", "Participant")
                        .WithMany("Paticipations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationProgram");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.ProgramOwner", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Editor", "Editor")
                        .WithOne("ProgramOwner")
                        .HasForeignKey("WillBeThere.Shared.Models.ProgramOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Editor", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("ProgramOwner");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.Navigation("Editors");

                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationCategory", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.PublicSpace", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.RegisteredUser", b =>
                {
                    b.Navigation("Editor");

                    b.Navigation("Paticipations");
                });
#pragma warning restore 612, 618
        }
    }
}
