// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WillBeThere.Backend.Context;

#nullable disable

namespace WillBeThere.Backend.Migrations
{
    [DbContext(typeof(WillBeThereMysqlContext))]
    [Migration("20240902082613_wt1")]
    partial class wt1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Door")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicScapeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PublicSpaceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PublicSpaceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PublicSpaceId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c3b14ee-4817-4cce-b587-cbbea3efbbbc"),
                            Door = -1,
                            Floor = -1,
                            House = 1,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeId = new Guid("2136922e-03f2-42b4-9302-376d59d772a2"),
                            PublicSpaceName = "Napraforgó utca"
                        },
                        new
                        {
                            Id = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Door = -1,
                            Floor = -1,
                            House = 49,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeId = new Guid("2136922e-03f2-42b4-9302-376d59d772a2"),
                            PublicSpaceName = "Koszorú utca"
                        },
                        new
                        {
                            Id = new Guid("895c2717-4cd3-40de-bb36-d656b8c059aa"),
                            Door = -1,
                            Floor = -1,
                            House = 33,
                            Locality = "Szeged",
                            PostalCode = 6757,
                            PublicScapeId = new Guid("2136922e-03f2-42b4-9302-376d59d772a2"),
                            PublicSpaceName = "Koszorú utca"
                        },
                        new
                        {
                            Id = new Guid("01f7c854-b768-42fb-8624-76f05c7c1405"),
                            Door = -1,
                            Floor = -1,
                            House = 50,
                            Locality = "Szeged",
                            PostalCode = 6710,
                            PublicScapeId = new Guid("d6bccebe-5f7a-4e98-847c-c33d2ef59846"),
                            PublicSpaceName = "Kapisztrán"
                        },
                        new
                        {
                            Id = new Guid("6bbcbb10-8b5b-4c07-8209-1d9738d89788"),
                            Door = -1,
                            Floor = -1,
                            House = 12,
                            Locality = "Szeged",
                            PostalCode = 6720,
                            PublicScapeId = new Guid("177fb4dd-7425-4594-96fe-f696b933ae1a"),
                            PublicSpaceName = "Dugonics"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OrganizationCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationCategoryId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8b9c35a-95a8-4d89-a18c-606b4eadc267"),
                            Description = "Gyálaréti Gyuris család programnaptára",
                            Name = "Gyálaréti Gyuris család",
                            Url = "gyuris.gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("7f928d5f-d456-4a18-9c3e-1ab568702071"),
                            Description = "Kikindáról elszármazott Gyuris Család",
                            Name = "Kikindai Gyuris család",
                            Url = "gyuris.kikinda.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("38ea04e5-8cdb-43ea-8bee-df36ce10e35a"),
                            Description = "Gyálaréten működő férfi sátor közösség",
                            Name = "Gyálaréti férfi sátor",
                            OrganizationCategoryId = new Guid("76f531fe-dfd8-42f1-bcac-67e116209036"),
                            Url = "ferfisator.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("6633a14b-d741-4361-9a9e-5922bb352a54"),
                            Description = "Magyarorszagi férfi sátor közösség",
                            Name = "Férfi sátor",
                            OrganizationCategoryId = new Guid("76f531fe-dfd8-42f1-bcac-67e116209036"),
                            Url = "ferfisator.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("59dee488-a5c7-4e35-b510-df102b3e6db8"),
                            Description = "Gyálaréten működő meditációs csoprot amely a Jézus imát gyakorolja",
                            Name = "Gyálaréti meditációs imacsoport",
                            OrganizationCategoryId = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Url = "meditacio.filia.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("2525ba33-38f5-42d1-bab8-fa587267d381"),
                            Description = "Gyálaréti filához tartozó csaladcsoport",
                            Name = "Gyálaréti családcsoport",
                            OrganizationCategoryId = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Url = "csaladcsoport.flila.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("d8bde7de-404c-40b2-8451-455ad3996af2"),
                            Description = "Gyálaréti művelődési ház",
                            Name = "Gyálaréti művelődési ház",
                            OrganizationCategoryId = new Guid("0a6b9791-2c40-469e-a756-ac887da92182"),
                            Url = "szeged-gyalaret.szeged-gyalaret.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("b344349a-3891-4c53-bd89-202b00228b79"),
                            Description = "Szentmihályi művelődési ház",
                            Name = "Szentmihályi művelődési ház",
                            OrganizationCategoryId = new Guid("0a6b9791-2c40-469e-a756-ac887da92182"),
                            Url = "muvelodesihaz.szeged-szentmihaly.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("4cec6b6e-7bc9-4d62-9180-aab6e62fde1e"),
                            Description = "Szeged-Csanád Egyházmegye Pasztorális helynöksége",
                            Name = "Szeged-Csanád Egyházmegye Pasztorális helynökség",
                            OrganizationCategoryId = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Url = "pasztoralis-helynokseg.szeged-csanádi-egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("ecea2b70-c39a-43a5-8d64-2fe95d96085f"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynökség - Családpasztoráció, ",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség - Családpasztoráció",
                            OrganizationCategoryId = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Url = "pasztoralis-helynokseg.szeged-csanádi-egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("d4e31f1f-8cff-4ff4-8de8-6fe4f2b8f8d6"),
                            Description = "Szeged-Csanád egyházmegye Pasztorális helynökség - Korházi lelkészség",
                            Name = "Szeged-Csanád egyházmegye Pasztorális helynökség - Korházi lelkészség",
                            OrganizationCategoryId = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Url = "korhazi-lelekszseg.pasztoralis-helynokseg.szeged-csanádi - egyhazmegye.ottleszek.hu",
                            Website = ""
                        },
                        new
                        {
                            Id = new Guid("8e469acb-5e33-4487-8b86-038af1554f24"),
                            Description = "Munkásmisszió, vezetői kör",
                            Name = "Munkáasmisszió",
                            OrganizationCategoryId = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Url = "vezetok.munkasmisszio.ottleszek.hu",
                            Website = ""
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProgramCategoryes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75b7661e-3771-4b92-a858-3c8dedfd5256"),
                            Name = "vallás"
                        },
                        new
                        {
                            Id = new Guid("3c8fe967-11c8-4e9d-b543-3fa1bb6e8f82"),
                            Name = "nevelés"
                        },
                        new
                        {
                            Id = new Guid("1594f99b-4a56-428f-8a04-e8014b207a31"),
                            Name = "házasság"
                        },
                        new
                        {
                            Id = new Guid("76f531fe-dfd8-42f1-bcac-67e116209036"),
                            Name = "férfi identitás"
                        },
                        new
                        {
                            Id = new Guid("9633caf3-2c5c-4bf5-b9a5-5fe7d1965b3b"),
                            Name = "ifjúság"
                        },
                        new
                        {
                            Id = new Guid("0a6b9791-2c40-469e-a756-ac887da92182"),
                            Name = "művelődés"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationEditor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EditorId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrganizationId1")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId1");

                    b.HasIndex("OrganizationId1");

                    b.ToTable("OrganizationEditors");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeffered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProgramOwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrgranizationPrograms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fb0f281-48bd-485e-b9b7-913fea1bccd7"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Csendes ima.",
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("59dee488-a5c7-4e35-b510-df102b3e6db8"),
                            ProgramOwnerId = new Guid("84d63948-8bd9-4a44-b22b-099cf6a0ec21"),
                            Start = new DateTime(2024, 8, 7, 20, 30, 0, 0, DateTimeKind.Local),
                            Title = "Meditáció"
                        },
                        new
                        {
                            Id = new Guid("372b2fe1-6a01-419a-b376-6b5be43ae9e7"),
                            AddressId = new Guid("6bbcbb10-8b5b-4c07-8209-1d9738d89788"),
                            Description = "Csendes lelkigyakorlat felnőtteknek.",
                            End = new DateTime(2024, 9, 2, 12, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("d4e31f1f-8cff-4ff4-8de8-6fe4f2b8f8d6"),
                            ProgramOwnerId = new Guid("410c7518-9cd9-4760-a911-28345eabc1bf"),
                            Start = new DateTime(2024, 9, 1, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Lelkigyakorlat"
                        },
                        new
                        {
                            Id = new Guid("a32d4262-2a21-4e2e-8082-3751aa8c8e82"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Apasebek tréning.",
                            End = new DateTime(2024, 9, 7, 20, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("38ea04e5-8cdb-43ea-8bee-df36ce10e35a"),
                            ProgramOwnerId = new Guid("bdf5ff18-c93c-478b-b8d7-a473c4fa57c7"),
                            Start = new DateTime(2024, 9, 7, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor tréning"
                        },
                        new
                        {
                            Id = new Guid("05b29b28-bc66-48b6-903f-108d5e80855f"),
                            AddressId = new Guid("6bbcbb10-8b5b-4c07-8209-1d9738d89788"),
                            Description = "Lányoknak...",
                            End = new DateTime(2024, 11, 17, 21, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("4cec6b6e-7bc9-4d62-9180-aab6e62fde1e"),
                            ProgramOwnerId = new Guid("ffc70c9f-b7fe-4afe-9a60-c20c175fdf2d"),
                            Start = new DateTime(2024, 11, 17, 15, 0, 0, 0, DateTimeKind.Local),
                            Title = "Ciklus show"
                        },
                        new
                        {
                            Id = new Guid("7a5127b0-66ef-4d39-b9d3-2aaf857de94d"),
                            AddressId = new Guid("895c2717-4cd3-40de-bb36-d656b8c059aa"),
                            Description = "Délalföldi",
                            End = new DateTime(2024, 9, 2, 2, 30, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = true,
                            OrganizationId = new Guid("d8bde7de-404c-40b2-8451-455ad3996af2"),
                            ProgramOwnerId = new Guid("5a64fcba-7d9d-4376-ad66-ad8f899dc175"),
                            Start = new DateTime(2024, 9, 1, 21, 0, 0, 0, DateTimeKind.Local),
                            Title = "Táncház"
                        },
                        new
                        {
                            Id = new Guid("b2472591-324b-4caa-96f1-c4ae10c92c13"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Férfiaknak",
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("6633a14b-d741-4361-9a9e-5922bb352a54"),
                            ProgramOwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Start = new DateTime(2024, 7, 7, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        },
                        new
                        {
                            Id = new Guid("09f8dc9f-ec64-41dc-a6f6-c5eef32d2b4d"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Férfiaknak",
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("6633a14b-d741-4361-9a9e-5922bb352a54"),
                            ProgramOwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Start = new DateTime(2024, 8, 3, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        },
                        new
                        {
                            Id = new Guid("fef0e8c5-292f-4666-9f58-59f98d403db6"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Férfiaknak",
                            End = new DateTime(2024, 9, 9, 21, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("6633a14b-d741-4361-9a9e-5922bb352a54"),
                            ProgramOwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Start = new DateTime(2024, 9, 9, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        },
                        new
                        {
                            Id = new Guid("03df70bd-2fa8-4a8c-9393-e3580da3d41f"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Családoknak",
                            End = new DateTime(2024, 9, 2, 1, 30, 0, 0, DateTimeKind.Local),
                            IsDeffered = false,
                            IsPublic = false,
                            OrganizationId = new Guid("2525ba33-38f5-42d1-bab8-fa587267d381"),
                            ProgramOwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Start = new DateTime(2024, 9, 1, 21, 0, 0, 0, DateTimeKind.Local),
                            Title = "Családcsoport"
                        },
                        new
                        {
                            Id = new Guid("9ca5faad-49bd-40bf-8c57-c9db7382afca"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Apasebek tréning.",
                            End = new DateTime(2024, 9, 22, 20, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = true,
                            IsPublic = true,
                            OrganizationId = new Guid("38ea04e5-8cdb-43ea-8bee-df36ce10e35a"),
                            ProgramOwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Start = new DateTime(2024, 9, 22, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor tréning"
                        },
                        new
                        {
                            Id = new Guid("5dbddd4a-bed9-4c4e-9e3a-d607cc8deb81"),
                            AddressId = new Guid("a66b07e7-573b-469f-b679-be2298c01d80"),
                            Description = "Férfiaknak",
                            End = new DateTime(2024, 9, 12, 21, 0, 0, 0, DateTimeKind.Local),
                            IsDeffered = true,
                            IsPublic = false,
                            OrganizationId = new Guid("6633a14b-d741-4361-9a9e-5922bb352a54"),
                            ProgramOwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Start = new DateTime(2024, 9, 12, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Férfi sátor"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationProgramId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RegisteredUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProgramId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("Participations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec294e86-fd64-4e03-b274-bd4c62758e42"),
                            Evaluation = 9,
                            OrganizationProgramId = new Guid("9fb0f281-48bd-485e-b9b7-913fea1bccd7"),
                            RegisteredUserId = new Guid("dd562ab7-6201-4e46-b9ea-f94c043ae30e")
                        },
                        new
                        {
                            Id = new Guid("3e37c941-6add-4667-9f50-804eb43af73f"),
                            Evaluation = 9,
                            OrganizationProgramId = new Guid("9fb0f281-48bd-485e-b9b7-913fea1bccd7"),
                            RegisteredUserId = new Guid("e7352d6f-d413-4af8-91a2-81e50013d3ec")
                        },
                        new
                        {
                            Id = new Guid("32aafbd4-f2fe-420a-9ef9-dcae1bb4b657"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("372b2fe1-6a01-419a-b376-6b5be43ae9e7"),
                            RegisteredUserId = new Guid("5bacd927-2106-4fc0-a4e1-4517d307bef3")
                        },
                        new
                        {
                            Id = new Guid("61305529-494d-48d1-a3d3-a37d06b67e4b"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("372b2fe1-6a01-419a-b376-6b5be43ae9e7"),
                            RegisteredUserId = new Guid("e7352d6f-d413-4af8-91a2-81e50013d3ec")
                        },
                        new
                        {
                            Id = new Guid("dda85b5d-711e-41e3-a5ed-6a2d56d91ded"),
                            Evaluation = -1,
                            OrganizationProgramId = new Guid("a32d4262-2a21-4e2e-8082-3751aa8c8e82"),
                            RegisteredUserId = new Guid("5bacd927-2106-4fc0-a4e1-4517d307bef3")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.ProgramOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EditorDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EditorDataId");

                    b.ToTable("ProgramOwners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdf5ff18-c93c-478b-b8d7-a473c4fa57c7")
                        },
                        new
                        {
                            Id = new Guid("6e3dc83f-5651-4e7d-aa9d-457e4646b601")
                        },
                        new
                        {
                            Id = new Guid("ffc70c9f-b7fe-4afe-9a60-c20c175fdf2d")
                        },
                        new
                        {
                            Id = new Guid("84d63948-8bd9-4a44-b22b-099cf6a0ec21")
                        },
                        new
                        {
                            Id = new Guid("5a64fcba-7d9d-4376-ad66-ad8f899dc175")
                        },
                        new
                        {
                            Id = new Guid("410c7518-9cd9-4760-a911-28345eabc1bf")
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.PublicSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PublicSpacees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2136922e-03f2-42b4-9302-376d59d772a2"),
                            Name = "utca"
                        },
                        new
                        {
                            Id = new Guid("177fb4dd-7425-4594-96fe-f696b933ae1a"),
                            Name = "tér"
                        },
                        new
                        {
                            Id = new Guid("3b48496f-006b-4a6f-b13b-6c9530b44848"),
                            Name = "sugárút"
                        },
                        new
                        {
                            Id = new Guid("d6bccebe-5f7a-4e98-847c-c33d2ef59846"),
                            Name = "köz"
                        },
                        new
                        {
                            Id = new Guid("f5922e5e-fa02-4a39-8c48-35d4ce19c86e"),
                            Name = "út"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.RegisteredUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd562ab7-6201-4e46-b9ea-f94c043ae30e"),
                            FirstName = "Csaba",
                            LastName = "Gyuris"
                        },
                        new
                        {
                            Id = new Guid("e7352d6f-d413-4af8-91a2-81e50013d3ec"),
                            FirstName = "Balázs",
                            LastName = "Szászi"
                        },
                        new
                        {
                            Id = new Guid("5bacd927-2106-4fc0-a4e1-4517d307bef3"),
                            FirstName = "Katalin",
                            LastName = "Gyurisné Hutter"
                        },
                        new
                        {
                            Id = new Guid("8263a126-1169-4dd5-b58e-bb2a17a9421d"),
                            FirstName = "Jenei",
                            LastName = "Kornél"
                        },
                        new
                        {
                            Id = new Guid("7ad65965-1e60-4908-8531-149f9f54e1c9"),
                            FirstName = "Anikó",
                            LastName = "Szászi"
                        },
                        new
                        {
                            Id = new Guid("fe44fbad-8b41-47c3-b5a3-b33557f3a753"),
                            FirstName = "Zsuzsanna",
                            LastName = "Szabóné"
                        });
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.PublicSpace", "PublicSpace")
                        .WithMany("Addresses")
                        .HasForeignKey("PublicSpaceId");

                    b.Navigation("PublicSpace");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Editor", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Organization", null)
                        .WithMany("OrganizationEditors")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.OrganizationCategory", "OrganizationCategory")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationCategoryId");

                    b.Navigation("OrganizationCategory");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationEditor", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Editor", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId1");

                    b.HasOne("WillBeThere.Shared.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId1");

                    b.Navigation("Editor");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Address", "Address")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("AddressId");

                    b.HasOne("WillBeThere.Shared.Models.Organization", "Organization")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Participation", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.OrganizationProgram", "OrganizationProgram")
                        .WithMany("ProgramParticipants")
                        .HasForeignKey("OrganizationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WillBeThere.Shared.Models.RegisteredUser", "Participant")
                        .WithMany("RegisteredUserPaticipations")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationProgram");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.ProgramOwner", b =>
                {
                    b.HasOne("WillBeThere.Shared.Models.Editor", "EditorData")
                        .WithMany()
                        .HasForeignKey("EditorDataId");

                    b.Navigation("EditorData");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Address", b =>
                {
                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.Organization", b =>
                {
                    b.Navigation("OrganizationEditors");

                    b.Navigation("OrganizationPrograms");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationCategory", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.OrganizationProgram", b =>
                {
                    b.Navigation("ProgramParticipants");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.PublicSpace", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("WillBeThere.Shared.Models.RegisteredUser", b =>
                {
                    b.Navigation("RegisteredUserPaticipations");
                });
#pragma warning restore 612, 618
        }
    }
}
